library(shiny)
install.packages("shiny")
runExample("01_hello")
library(shiny)
runExample("01_hello")
getwd()
runApp("test")
runApp("test")
runApp("test")
runApp("test")
runApp("test")
runApp("test")
runApp("test")
runApp("test")
runApp("test")
runApp("test")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
value = 25)
library(shiny)
library(ggplot2)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("This is a test"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Bin count:",
min = 5,
max = 40,
value = 25)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runExample("02_text")
runExample("02_text")
runApp("test", display.mode = "showcase")
?radioButtons
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
runApp("App-1")
runExample ("01_hello")
runExample ("02_hello")
runExample("02_text")
iris <- dataset(iris)
iris <- data(iris)
iris
?iris
iris
dat <- iris
View(dat)
plot(dat$Sepal.Width, dat$Sepal.Length)
plot(dat)
plot(dat$Petal.Width, dat$Sepal.Length)
plot(dat$Petal.Width, dat$Sepal.Length, color = dat$Species)
plot(dat$Petal.Width, dat$Sepal.Length, col = dat$Species)
?plot
warnings()
plot(dat$Petal.Width, dat$Sepal.Length, col = dat$Species)
plot(dat$Petal.Width, dat$Sepal.Length, col = dat$Species, cex = 1)
plot(dat$Petal.Width, dat$Sepal.Length, col = dat$Species, cex = 3)
plot(dat$Petal.Width, dat$Sepal.Length, col = dat$Species, pch = 16)
?legend
legend()
legend(2000,9.5, # places a legend at the appropriate place c("Health","Defense"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("blue","red")) # gives the legend lines the correct color and width
legend('topright', dat$Species, col=c('red', 'blue', 'green',' brown'), bty='n', cex=.75)
legend('topright', col=dat$Species, col=c('red', 'blue', 'green',' brown'), bty='n', cex=.75)
legend('topright', col=dat$Species, col=c('red', 'blue', 'green'), bty='n', cex=.75)
legend('topright', col=dat$Species, col=c('red', 'blue', 'green',' brown'))
legend('topleft', col=dat$Species)
legend("topleft", col=dat$Species)
legend("topleft", legend = "Hi" col=dat$Species)
legend("topleft", legend = "Hi", col=dat$Species)
legend("topleft", legend = dat$Species, col=dat$Species)
legend("topleft", legend = unique(dat$Species), col=dat$Species)
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
?svm
model <- svm(dat$Species ~ dat$Petal.Width + dat$Sepal.Length)
plot(model)
y <- dat$Species
model <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat)
model <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat)
y <- dat$Species
summary(model)
plot(model, dat)
model <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat,
kernel = input$kernel_type)
model <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat
)
plot(model, dat)
model <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat)
library(e1071)
model <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat)
plot(model, dat)
summary(model)
?model
?dat
svmfit=svm(Species ~ ., data=dat, kernel="linear", cost=10,
scale=FALSE)
plot(svmfit, dat)
?plot.svm
svmfit <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat)
plot(x=svmfit, data=dat, formula = Species ~ Petal.Width + Sepal.Length)
str(iris)
plot(x=svmfit, data=dat, formula = Petal.Width ~ Sepal.Length)
input$kernel_type = "radial"
runApp("test", display.mode = "showcase")
runExample("03_reactivity")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
?plot.svm
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
?textOutput
runApp("test", display.mode = "showcase")
terrain.colors
?terrain.colors
runApp("test", display.mode = "showcase")
dat <- iris
svmfit <- svm(formula = Species ~ Petal.Width + Sepal.Length,
data = dat
)
plot(x=svmfit,
data=dat,
formula = Petal.Width ~ Sepal.Length,
grid = 100,
svSymbol = 16,
dataSymbol = 16,
symbolPalette = c("darkblue","darkgrey","red"))
plot(x=svmfit,
data=dat,
formula = Petal.Width ~ Sepal.Length,
grid = 100,
svSymbol = 16,
dataSymbol = 16,
symbolPalette = c("darkblue","darkgrey","red"), title = NULL)
plot(x=svmfit,
data=dat,
formula = Petal.Width ~ Sepal.Length,
grid = 100,
svSymbol = 16,
dataSymbol = 16,
symbolPalette = c("darkblue","darkgrey","red"), main = NULL)
plot(x=svmfit,
data=dat,
formula = Petal.Width ~ Sepal.Length,
grid = 100,
svSymbol = 16,
dataSymbol = 16,
symbolPalette = c("darkblue","darkgrey","red"), main = "ww")
plot(x=svmfit,
data=dat,
formula = Petal.Width ~ Sepal.Length,
grid = 100,
svSymbol = 16,
dataSymbol = 16,
symbolPalette = c("darkblue","darkgrey","red"))
title("whh")
runApp("test", display.mode = "showcase")
?selectInput
runApp("test", display.mode = "showcase")
?as.formula
svmfit <- svm(formula = as.formula(Species ~ input$petalvar + input$sepalvar),
data = dat)
?svm
runApp("test", display.mode = "showcase")
as.formula(paste("Species","~", dat$petalvar, "+", dat$sepalvar))
as.formula(paste("dat$Species","~", dat$Petal.Length, "+", dat$Sepal.Length))
dat$Petal.Length
as.formula(paste("dat$Species","~", dat$Petal.Length, "+", dat$Sepal.Length))
as.formula(paste("dat$Species ~", dat$Petal.Length, "+", dat$Sepal.Length))
formula(paste("dat$Species ~", dat$Petal.Length, "+", dat$Sepal.Length))
runApp("test", display.mode = "showcase")
input <-data.frame(petalvar = dat[,2], sepalvar = dat[,3])
View(input)
formula(paste("Species ~", input$petalvar, "+", input$sepalvar))
paste("Species ~", input$petalvar, "+", input$sepalvar)
formula(paste("Species ~", input$petalvar, "+", input$sepalvar))
library(shiny)
library(datasets)
library(e1071)
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
runApp("test", display.mode = "showcase")
?colSums
?mean
?lm
?dgamma
?showMethods()
?getClass()
?getMethod
?getS3Method
?getS3method
shinyapps::setAccountInfo(name='andy29075mooc', token='E5D97E8597E29EAAA7472EE01CB701E8', secret='QFXdBUC5CjR6FOfBGf6RTwjgWUSH4qB6w2AoB01c')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='andy29075mooc', token='E5D97E8597E29EAAA7472EE01CB701E8', secret='QFXdBUC5CjR6FOfBGf6RTwjgWUSH4qB6w2AoB01c')
options(rpubs.upload.method = "internal")
options(rpubs.upload.method = "internal")
summary(iris)
library(shiny)
library(datasets)
library(e1071)
shinyUI(
fluidPage(
titlePanel("Classification via Support Vector Machine on Fisher's Iris Data"),
sidebarLayout(
sidebarPanel(
radioButtons("kernel_type", "Select SVM kernel type:",
c("Linear" = "linear",
"Radial" = "radial",
"Polynomial" = "polynomial")
),
selectInput("petalvar", "Select petal-dimension predictor variable:",
choices = list("Petal Width" = "Petal.Width",
"Petal Length" = "Petal.Length")
),
selectInput("sepalvar", "Select sepal-dimension predictor variable:",
choices = list("Sepal Width" = "Sepal.Width",
"Sepal Length" = "Sepal.Length")
)
),
mainPanel(
h4(textOutput("text1")),
plotOutput("plot1")
)
)
)
)
runApp("test", display.mode = "showcase")
library(shiny)
library(datasets)
library(e1071)
shinyUI(
fluidPage(
titlePanel("Classification via Support Vector Machine on Fisher's Iris Data"),
sidebarLayout(
sidebarPanel(
radioButtons("kernel_type", "Select SVM kernel type:",
c("Linear" = "linear",
"Radial" = "radial",
"Polynomial" = "polynomial")
),
selectInput("petalvar", "Select petal-dimension predictor variable:",
choices = list("Petal Width" = "Petal.Width",
"Petal Length" = "Petal.Length")
),
selectInput("sepalvar", "Select sepal-dimension predictor variable:",
choices = list("Sepal Width" = "Sepal.Width",
"Sepal Length" = "Sepal.Length")
)
),
mainPanel(
h4(textOutput("text1")),
plotOutput("plot1")
)
)
)
)
runApp("test")
shinyapps::setAccountInfo(name='andy29075mooc', token='E5D97E8597E29EAAA7472EE01CB701E8', secret='QFXdBUC5CjR6FOfBGf6RTwjgWUSH4qB6w2AoB01c')
options(rpubs.upload.method = "internal")
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
publish(title = 'SVM Example', 'docs-rpubs.html', host = 'rpubs')
require("slidify")
publish(title = 'SVM Example', 'docs-rpubs.html', host = 'rpubs')
publish(title = 'SVM Example', 'docs-rpubs.html', host = 'rpubs')
??publish
dat
dat <- datasets(iris)
dat <- dataset(iris)
require(datasets)
dat <- datasets(iris)
dat <- data(iris)
dat
dat <- iris
dat
rm(iris)
rm(dat)
data(iris)
iris
View(iris)
plot(iris$Petal.Length, iris$Sepal.Width)
plot(iris$Petal.Length, iris$Sepal.Width, col = iris$Species)
require(ggplot2)
ggplot(data = iris, iris$Petal.Length, iris$Sepal.Width)
ggplot(data = iris, aes(iris$Petal.Length, iris$Sepal.Width))
ggplot(data = iris, aes(iris$Petal.Length, iris$Sepal.Width)) + geom_point()
ggplot(data = iris, aes(iris$Petal.Length, iris$Sepal.Width)) + geom_point(aes(color = iris$Species))
